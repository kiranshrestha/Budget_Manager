type: edu
custom_name: stage4
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            // write your code here
            Scanner s = new Scanner(System.in);
            BudgetManager budgetManager = new BudgetManager(s);
            budgetManager.showMenu();
        }
    }
  learner_created: false
- name: src/budget/BudgetManager.java
  visible: true
  text: |+
    package budget;
    import java.io.*;
    import java.util.ArrayList;
    import java.util.Scanner;
    import java.util.stream.Collectors;

    public class BudgetManager {
        Scanner s;
        private double balance;
        private double purchaseAmount;
        private final ArrayList<Product> purchaseList;

        public BudgetManager(Scanner s) {
            this.s = s;
            purchaseList = new ArrayList<>();
        }

        public void showMenu() {
            System.out.println("Choose your action:\n" +
                    "1) Add income\n" +
                    "2) Add purchase\n" +
                    "3) Show list of purchases\n" +
                    "4) Balance\n" +
                    "5) Save\n" +
                    "6) Load\n" +
                    "0) Exit");
            var input = s.nextInt();
            s.nextLine();
            System.out.println();
            switch (input) {
                case 1 : {
                    System.out.println("Enter income:");
                    balance = s.nextLong();
                    System.out.println("Income was added!\n");
                    showMenu();
                    break;
                }

                case 2 : {
                    showPurchaseMenu();
                    System.out.println();
                    showMenu();
                    break;
                }

                case 3 : {
                    if(purchaseList.isEmpty()) {
                        System.out.println("The purchase list is empty!");
                    } else {
                        showPurchaseListType();
                    }
                    System.out.println();
                    showMenu();
                    break;
                }

                case 4 : {
                    System.out.printf("Balance: $%.2f\n\n", balance - purchaseAmount);
                    showMenu();
                    break;
                }

                case 5 : {
                    try(PrintWriter printWriter = new PrintWriter("Budget.txt")) {
                        printWriter.println(balance);
                        printWriter.println(purchaseAmount);
                        purchaseList.forEach(product -> printWriter.println(product.toString()));

                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Purchases were saved!\n");
                    showMenu();
                    break;
                }

                case 6 : {
                    try(BufferedReader bufferedReader = new BufferedReader(new FileReader("Budget.txt"))) {
                        balance = Double.parseDouble(bufferedReader.readLine());
                        purchaseAmount = Double.parseDouble(bufferedReader.readLine());

                        System.out.println("balance = " + balance);
                        System.out.println("purchaseAmount = " + purchaseAmount);
                        while (true) {
                            String line = bufferedReader.readLine();
                            if(line==null)
                                break;
                            purchaseList.add(new Product(line));
                        }

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Purchases were loaded!\n");
                    showMenu();
                    break;
                }

                case 0 : {
                    System.out.println("Bye!");
                }
            }

        }

        private void showPurchaseListType() {
            System.out.println("Choose the type of purchases\n" +
                    "1) Food\n" +
                    "2) Clothes\n" +
                    "3) Entertainment\n" +
                    "4) Other\n" +
                    "5) All\n" +
                    "6) Back");
            var input = s.nextInt();
            s.nextLine();
            if(input == 6) {
                return;
            }
            System.out.println();
            if(input == 5) {
                if (purchaseList.isEmpty()) {
                    System.out.println("The purchase list is empty\n");
                } else {
                    System.out.println("All:");
                    purchaseList.forEach(Product::displayProduct);
                    System.out.printf("Total sum: %.2f\n\n", purchaseAmount);
                }
            } else {
                var type = Category.values()[input - 1];
                var typeStr = "";
                switch (input) {
                    case 1 : {
                        typeStr = "Food";
                        break;
                    }
                    case 2 : {
                        typeStr = "Clothes";
                        break;
                    }
                    case 3 : {
                        typeStr = "Entertainment";
                        break;
                    }
                    case 4 : {
                        typeStr = "Other";
                        break;
                    }

                }

                var catList = purchaseList.stream().filter(product -> product.category == type).collect(Collectors.toList());
                var sum = catList.stream().mapToDouble(product -> product.price).sum();
                if (catList.isEmpty()) {
                    System.out.println("The purchase list is empty\n");
                } else {
                    System.out.printf("%s:\n", typeStr);
                    catList.forEach(Product::displayProduct);
                    System.out.printf("Total sum: %.2f\n\n", sum);
                }
            }
            showPurchaseListType();

        }

        private void showPurchaseMenu() {
            System.out.println("Choose the type of purchase\n" +
                    "1) Food\n" +
                    "2) Clothes\n" +
                    "3) Entertainment\n" +
                    "4) Other\n" +
                    "5) Back");

            final int input = s.nextInt();
            s.nextLine();
            if(input == 5)
                return;

            var type = Category.values()[input - 1];
            System.out.println();
            System.out.println("Enter purchase name:");
            var name = s.nextLine();
            System.out.println("Enter its price: ");
            var price = s.nextFloat();
            s.nextLine();
            purchaseAmount += price;
            purchaseList.add(new Product(name, price, type));
            System.out.println("Purchase was added!");
            System.out.println();
            showPurchaseMenu();
        }


    }

  learner_created: false
- name: src/budget/Category.java
  visible: true
  text: |
    package budget;

    public enum Category {
        FOOD(1),
        CLOTHES(2),
        ENTERTAINMENT(3),
        OTHER(4),
        ALL(5);
        int val;
        Category(int val) {
            this.val = val;
        }
    }
  learner_created: false
- name: src/budget/Product.java
  visible: true
  text: |+
    package budget;


    import java.io.Serializable;
    import java.util.Arrays;

    class Product implements Serializable {
        String name;
        float price;
        Category category;
        public Product(String name, float price, Category category) {
            this.name = name;
            this.price = price;
            this.category = category;
        }

        public Product(String all) {
            var list = all.split(" ");
            this.name = list[0];
            this.price = Float.parseFloat(list[1]);
            this.category = Category.values()[Integer.parseInt(list[2]) + 1];
        }

        public void displayProduct() {
            System.out.printf("%s %.2f\n", name, price);
        }

        @Override
        public String toString() {
            return name +" "+ price + " " + category.val;
        }
    }

  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test1),

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test2),

                new TestCase<String>()
                    .setInput("4\n0")
                    .setCheckFunc(BudgetManagerTest::test3),

                new TestCase<String>()
                    .setInput("1\n400\n4\n1\n200\n4\n0")
                    .setCheckFunc(BudgetManagerTest::test4),

                new TestCase<String>()
                    .setInput("1\n1000\n2\n" +
                        "1\nAlmond 250g\n35.43\n" +
                        "1\nMilk\n3.50\n" +
                        "1\nRed Fuji Apple\n5.99\n" +
                        "1\nEggs\n3.99\n" +
                        "1\nFIJI Natural Artesian Water\n25.98\n" +
                        "1\nHershey's milk chocolate bars\n8.54\n" +
                        "1\nGreat Value Broccoli Florets\n1.00\n" +
                        "1\nKeystone Ground Bee\n6.28\n" +
                        "2\nGildan LT\n8.61\n" +
                        "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                        "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                        "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                        "3\nCinema\n8.73\n" +
                        "3\nSkate rental\n30\n" +
                        "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                        "4\nChick-fil-A $10 Gift Card\n10\n" +
                        "4\nDebt\n3.50\n" +
                        "5\n5\n0").setCheckFunc(BudgetManagerTest::test5),

                new TestCase<String>()
                    .setInput("6\n4\n3\n5\n1\n6\n0")
                    .setCheckFunc(BudgetManagerTest::test6)
            );
        }

        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                    "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                        "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 4\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                    "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                    "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 10\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                    "Balance is wrong after adding income!.\n" +
                        "Expected:\n" +
                        "Balance: $400.00\n" +
                        "Your output:\n" +
                        balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                    "Your program should create purchases.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 12\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                    "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28",
                "Gildan LT $8.61",
                "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                "Wrangler Men's Stretch Cargo Pant $19.97",
                "LEGO DUPLO Town Farm Animals $10.10",
                "Cinema $8.73",
                "Skate rental $30.00",
                "Sensodyne Pronamel Toothpaste $19.74",
                "Chick-fil-A $10 Gift Card $10.00",
                "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your all purchases list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of all purchases is wrong. Expected:\n" +
                        "Total sum: $214.36\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                    "Your all total sum is wrong!");
            }


            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[] {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your food list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of food list is wrong. Expected:\n" +
                        "Total sum: $90.71\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                    "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: purchases.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/76/stages/424/implement#comment
status: Solved
record: 3
